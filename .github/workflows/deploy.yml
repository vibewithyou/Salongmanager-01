name: Deploy SalonManager

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: salonmanager_test
          MYSQL_USER: salonmanager
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, zip, gd, redis
        coverage: xdebug

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      working-directory: ./salonmanager/backend

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      working-directory: ./salonmanager/backend

    - name: Generate key
      run: php artisan key:generate
      working-directory: ./salonmanager/backend

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
      working-directory: ./salonmanager/backend

    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
      working-directory: ./salonmanager/backend

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: salonmanager_test
        DB_USERNAME: salonmanager
        DB_PASSWORD: password
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379
      run: php artisan test
      working-directory: ./salonmanager/backend

  build-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get
      working-directory: ./frontend

    - name: Run tests
      run: flutter test
      working-directory: ./frontend

    - name: Build web
      run: flutter build web --release
      working-directory: ./frontend

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, zip, gd

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      working-directory: ./salonmanager/backend

    - name: Run Security Audit
      run: |
        php ops/audit/standalone_audit.php
        # Check if critical issues exist
        if grep -q "Critical Issues" ops/audit/report.md; then
          echo "Critical security issues found!"
          cat ops/audit/report.md
          exit 1
        fi
      working-directory: ./

  deploy-staging:
    needs: [test, build-frontend, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: docker-compose up -d

  deploy-production:
    needs: [test, build-frontend, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: docker-compose -f docker-compose.prod.yml up -d
